# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python/Flask Microservices

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: your-dockerhub-username
  HELM_RELEASE: devops-app
  HELM_NAMESPACE: default
  PYTHONPATH: ${{ github.workspace }}

permissions:
  contents: read

jobs:
  linting:
    name: Run Static Code Analysis
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [user_service, product_service, notification_service, order_service]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Lint with flake8
        working-directory: ./services/${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    name: Run Tests
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: List directory for debugging
        run: ls -R

      - name: Run test with pytest
        run: |
          if [ -d tests ]; then
            pytest tests
          else
            echo "No tests to run"
          fi

  build:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [user-service, product-service, notification-service, order-service]

    steps:
      - uses: actions/checkout@v3

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      - name: Set up Docker Buildx
        run: docker buildx create --use

      - name: Log in to Docker Hub
        if: ${{ secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD }}
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # - name: Log in to DockerHub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push image
        run: |
          docker build -t $REGISTRY/$IMAGE_PREFIX/${{ matrix.service }}:latest ./services/${{ matrix.service }}
          docker push $REGISTRY/$IMAGE_PREFIX/${{ matrix.service }}:latest

          
    
