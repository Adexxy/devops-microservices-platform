# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python/Flask Microservices

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
      inputs:
        target:
          description: "Choose deployment target"
          required: true
          default: "eks"
          type: choice
          options:
            - generic
            - eks
            - ecs
        registry:
          description: "Push to which registry?"
          required: true
          default: "ecr"
          type: choice
          options:
            - dockerhub
            - ecr

env:
  # REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  # REGISTRY: docker.io
  REGISTRY: ${{ github.event.inputs.registry || 'ecr' }}
  IMAGE_PREFIX: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_TAG: ${{ github.sha }}
  HELM_RELEASE: microservices-app
  HELM_NAMESPACE: microservises
  PYTHONPATH: ${{ github.workspace }}
  TARGET: ${{ github.event.inputs.target || 'eks' }}
  REGISTRY_INPUT: ${{ github.event.inputs.registry || 'ecr' }}

permissions:
  contents: read

jobs:
  static_code_analysis:
    name: Run Static Code Analysis
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [user_service, product_service, notification_service, order_service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Lint with flake8
        working-directory: ./services/${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    name: Run Tests
    runs-on: ubuntu-latest    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: List directory for debugging
        run: ls -R

      - name: Run test with pytest
        run: |
          if [ -d tests ]; then
            pytest tests
          else
            echo "No tests to run"
          fi

  build:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [user_service, product_service, notification_service, order_service, database]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        run: docker buildx create --use

      ##############################
      # DockerHub Login
      ##############################    

      - name: Log in to Docker Hub
        if: ${{ github.event.inputs.registry == 'dockerhub' }}
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin


      ##############################
      # AWS ECR Login
      ##############################
      - name: Configure AWS credentials
        if: ${{ github.event.inputs.registry == 'ecr' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        if: ${{ github.event.inputs.registry == 'ecr' }}
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      ##############################
      # Tag Setup
      ##############################
      - name: Set image repo
        id: vars
        run: |
          if [[ "$REGISTRY" == "ecr" ]]; then
            echo "repo=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ matrix.service }}" >> $GITHUB_OUTPUT
          else
            echo "repo=${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}" >> $GITHUB_OUTPUT
          fi


      ##############################
      # Build and Push
      ##############################
      - name: Build and push image
        run: |
          SERVICE_DIR="./services/${{ matrix.service }}"
          if [[ "${{ matrix.service }}" == "database" ]]; then
            SERVICE_DIR="./database"
          fi
          docker build -t ${{ steps.vars.outputs.repo }}:${{ env.IMAGE_TAG }} $SERVICE_DIR
          docker push ${{ steps.vars.outputs.repo }}:${{ env.IMAGE_TAG }}


      # - name: Build and push image
      #   if: ${{ matrix.service != 'database' }}
      #   run: |
      #     docker build -t $REGISTRY/$IMAGE_PREFIX/${{ matrix.service }}:${{ env.IMAGE_TAG }} ./services/${{ matrix.service }}
      #     docker push $REGISTRY/$IMAGE_PREFIX/${{ matrix.service }}:${{ env.IMAGE_TAG }}

      # - name: Build and push Postgres image
      #   if: ${{ matrix.service == 'database' }}
      #   run: |
      #     docker build -t $REGISTRY/$IMAGE_PREFIX/${{ matrix.service }}:${{ env.IMAGE_TAG }} ./${{ matrix.service }}
      #     docker push $REGISTRY/$IMAGE_PREFIX/${{ matrix.service }}:${{ env.IMAGE_TAG }}

  # deploy_to_server:
  #   name: Deploy to Server
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Helm
  #       run: |
  #         HELM_VERSION="v3.12.3"
  #         curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
  #         echo "Expected checksum: $(curl -fsSL https://github.com/helm/helm/releases/download/$HELM_VERSION/helm-$HELM_VERSION-linux-amd64.tar.gz.sha256sum)"
  #         bash get_helm.sh --version $HELM_VERSION
  #         rm -f get_helm.sh
  #         curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      # - name: Set up kubeconfig
      #   run: |
      #     mkdir -p $HOME/.kube
      #     echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
      #     chmod 600 $HOME/.kube/config

      # - name: Deploy to Kubernetes
      #   run: |
      #     helm upgrade --install $HELM_RELEASE \
      #     ./helm-charts/microservices \
      #     --namespace $HELM_NAMESPACE \
      #     --create-namespace \
      #     --set image.tag=${{ env.IMAGE_TAG }} \
      #     --dry-run --debug
      #     # --wait



  deploy:
    name: Deploy based on input
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3


      ########################################
      # Common: Set up Helm (for K8s and EKS)
      ########################################

      - name: Set up Helm
        run: |
          HELM_VERSION="v3.12.3"
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          echo "Expected checksum: $(curl -fsSL https://github.com/helm/helm/releases/download/$HELM_VERSION/helm-$HELM_VERSION-linux-amd64.tar.gz.sha256sum)"
          bash get_helm.sh --version $HELM_VERSION
          rm -f get_helm.sh
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      
      ########################################
      # Generic Kubernetes Deployment
      ########################################

      - name: Set up kubeconfig for generic cluster
        if: ${{ github.event.inputs.target == 'generic' }}
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      ########################################
      # AWS EKS Deployment
      ########################################

      - name: Configure AWS credentials (for EKS and ECS)
        if: ${{ github.event.inputs.target == 'eks' || github.event.inputs.target == 'ecs' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up kubectl for EKS
        if: ${{ github.event.inputs.target == 'eks' }}
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Update kubeconfig for EKS
        if: ${{ github.event.inputs.target == 'eks' }}
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      ########################################
      # ECS Deployment
      ########################################

      - name: Deploy to ECS
        if: ${{ github.event.inputs.target == 'ecs' }}
        # run: |
        #   aws ecs update-service \
        #     --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
        #     --service ${{ secrets.ECS_SERVICE_NAME }} \
        #     --force-new-deployment

        run: |
          IFS=',' read -ra SERVICES <<< "${{ secrets.ECS_SERVICE_NAMES }}"
          for svc in "${SERVICES[@]}"; do
            aws ecs update-service \
              --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
              --service "$svc" \
              --force-new-deployment
          done

      ########################################
      # Deploy to Kubernetes (generic or EKS)
      ########################################

      - name: Deploy with Helm
        if: ${{ github.event.inputs.target == 'generic' || github.event.inputs.target == 'eks' }}
        run: |
          helm upgrade --install $HELM_RELEASE \
          ./helm-charts/microservices \
          --namespace $HELM_NAMESPACE \
          --create-namespace \
          --set image.tag=${{ env.IMAGE_TAG }} \
          # --dry-run --debug
          --wait




            
      
