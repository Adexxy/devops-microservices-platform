# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python/Flask Microservices

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_TAG: ${{ github.sha }}
  HELM_RELEASE: microservices-app
  HELM_NAMESPACE: microservises
  PYTHONPATH: ${{ github.workspace }}

permissions:
  contents: read

jobs:
  static_code_analysis:
    name: Run Static Code Analysis
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [user_service, product_service, notification_service, order_service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Lint with flake8
        working-directory: ./services/${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    name: Run Tests
    runs-on: ubuntu-latest    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: List directory for debugging
        run: ls -R

      - name: Run test with pytest
        run: |
          if [ -d tests ]; then
            pytest tests
          else
            echo "No tests to run"
          fi

  build:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [user_service, product_service, notification_service, order_service, database]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        run: docker buildx create --use

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push image
        if: ${{ matrix.service != 'database' }}
        run: |
          docker build -t $REGISTRY/$IMAGE_PREFIX/${{ matrix.service }}:${{ env.IMAGE_TAG }} ./services/${{ matrix.service }}
          docker push $REGISTRY/$IMAGE_PREFIX/${{ matrix.service }}:${{ env.IMAGE_TAG }}

      - name: Build and push Postgres image
        if: ${{ matrix.service == 'database' }}
        run: |
          docker build -t $REGISTRY/$IMAGE_PREFIX/${{ matrix.service }}:${{ env.IMAGE_TAG }} ./${{ matrix.service }}
          docker push $REGISTRY/$IMAGE_PREFIX/${{ matrix.service }}:${{ env.IMAGE_TAG }}

  deploy_to_server:
    name: Deploy to Server
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Helm
        run: |
          HELM_VERSION="v3.12.3"
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          echo "Expected checksum: $(curl -fsSL https://github.com/helm/helm/releases/download/$HELM_VERSION/helm-$HELM_VERSION-linux-amd64.tar.gz.sha256sum)"
          bash get_helm.sh --version $HELM_VERSION
          rm -f get_helm.sh
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      # - name: Set up kubeconfig
      #   run: |
      #     mkdir -p $HOME/.kube
      #     echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
      #     chmod 600 $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          helm upgrade --install $HELM_RELEASE \
          ./helm-charts/microservices \
          --namespace $HELM_NAMESPACE \
          --create-namespace \
          --set image.tag=${{ env.IMAGE_TAG }} \
          --dry-run --debug
          # --wait



          
    
